from pyspark.sql import SparkSession
from pyspark.ml import Pipeline
from pyspark.ml.feature import VectorAssembler
from pyspark.ml.regression import LinearRegression
from pyspark.ml.evaluation import RegressionEvaluator

# Create a Spark session
spark = SparkSession.builder.appName("LinearRegressionPipelineExample").getOrCreate()

# Sample DataFrame
data = [(1.0, 2.0, 3.0),
        (2.0, 3.0, 4.0),
        (3.0, 4.0, 5.0),
        (4.0, 5.0, 6.0)]

columns = ["label", "feature1", "feature2"]

df = spark.createDataFrame(data, columns)

# Define the feature assembler
feature_columns = ["feature1", "feature2"]
assembler = VectorAssembler(inputCols=feature_columns, outputCol="features")

# Define the linear regression model
lr = LinearRegression(featuresCol="features", labelCol="label")

# Create a pipeline with the feature assembler and linear regression model
pipeline = Pipeline(stages=[assembler, lr])

# Split the data into training and testing sets
train_data, test_data = df.randomSplit([0.8, 0.2], seed=123)

# Fit the pipeline to the training data
pipeline_model = pipeline.fit(train_data)

# Make predictions on the test data
predictions = pipeline_model.transform(test_data)

# Show the predictions
predictions.select("prediction", "label", "features").show()

# Evaluate the model
evaluator = RegressionEvaluator(labelCol="label", predictionCol="prediction", metricName="rmse")
rmse = evaluator.evaluate(predictions)
print("Root Mean Squared Error (RMSE) on test data = {}".format(rmse))
